Method references can be seen as shorthand for lambdas calling only a specific method.

When you need a method reference, the target reference is
placed before the delimiter :: and the name of the method is provided after it. For example,
Apple::getWeight is a method reference to the method getWeight defined in the Apple class.

Lambda 										Method reference equivalent
(Apple a) -> a.getWeight() 					Apple::getWeight
() -> Thread.currentThread().dumpStack() 	Thread.currentThread()::dumpStack
(str, i) -> str.substring(i) 				String::substring
(String s) -> System.out.println(s) 		System.out::println

You can think of method references as syntactic sugar for lambdas that refer only to a single
method because you write less to express the same thing.

There are three main kinds of method references:
1. A method reference to a static method (for example, the method parseInt of Integer, written
Integer::parseInt)
2. A method reference to an instance method of an arbitrary type (for example, the method
length of a String, written String::length)
3. A method reference to an instance method of an existing object (for example, suppose you
have a local variable expensiveTransaction that holds an object of type Transaction, which
supports an instance method getValue; you can write expensiveTransaction::getValue)